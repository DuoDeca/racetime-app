# Generated by Django 3.0.2 on 2020-02-21 07:16

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('racetime', '0014_userranking_best_time'),
    ]

    operations = [
        migrations.CreateModel(
            name='AsynchronousRace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_goal', models.CharField(blank=True, default=None, help_text='Set a custom goal for this race, if none of the category goals are suitable. <strong>Custom races cannot be recorded.</strong>', max_length=255, null=True)),
                ('info', models.TextField(blank=True, help_text='Any useful information for race entrants (e.g. randomizer seed).', max_length=1000, null=True)),
                ('slug', models.SlugField(help_text='Unique URL slug for this race. Leave blank to auto-generate one.')),
                ('opened_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(help_text='Enter the cut-off date for new entries. After this the race will close, and once all entries are verfied the race will be complete. Note this value is always in UTC.', verbose_name='End date/time')),
                ('cancelled_at', models.DateTimeField(null=True)),
                ('recordable', models.BooleanField(default=True, help_text='Record the result of this race. Will be automatically turned off if a custom goal is set.')),
                ('recorded', models.BooleanField(default=False)),
                ('auto_accept', models.BooleanField(default=False)),
                ('allow_comments', models.BooleanField(default=True, help_text='Allow race entrants to add a glib remark after they finish.')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='racetime.Category')),
                ('goal', models.ForeignKey(blank=True, help_text='Set a goal for this race. Required unless a custom goal is set.', null=True, on_delete=django.db.models.deletion.CASCADE, to='racetime.Goal')),
                ('opened_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opened_async_races', to=settings.AUTH_USER_MODEL)),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AsynchronousEntrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Verified'), ('declined', 'Declined')], default='pending', max_length=50)),
                ('finish_time', models.DurationField(help_text='Your overall finish time')),
                ('video_link', models.URLField(help_text='A link to your VOD (e.g. Twitch, YouTube) for verification', null=True)),
                ('comment', models.TextField(blank=True, help_text='Any notes or thoughts you wish to share', max_length=200, null=True)),
                ('place', models.PositiveSmallIntegerField(null=True)),
                ('score_change', models.FloatField(null=True)),
                ('dq', models.BooleanField(default=False)),
                ('moderated_at', models.DateTimeField(null=True)),
                ('moderated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entrant_set', to='racetime.AsynchronousRace')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='asynchronousrace',
            constraint=models.UniqueConstraint(fields=('category', 'slug'), name='unique_category_arace_slug'),
        ),
        migrations.AddConstraint(
            model_name='asynchronousentrant',
            constraint=models.UniqueConstraint(fields=('user', 'race'), name='unique_user_arace'),
        ),
    ]
